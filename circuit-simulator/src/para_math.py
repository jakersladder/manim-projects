from manim import *
import math
import numpy as np
from math_equations import * 

class ParaMath(Scene):
    def construct(self):
        slide_title = Text("Electric Parametric Oscilator", font_size=48).to_edge(UP, buff=0.5).set_color(YELLOW)
        para_title = Text("Variation of L Series in LCR Ciruit", font_size=20).next_to(slide_title,DOWN)

        res_eqs = VGroup(electric_res_eqs[0],electric_res_eqs[2]).arrange(RIGHT, buff = 1)
        f_res_eqs = VGroup(electric_res_eqs[3],electric_res_eqs[4]).arrange(RIGHT, buff = 1)
        self.add(slide_title)
        self.play(Write(para_title))
        self.wait()
        self.play(Write(electric_eqs[1].next_to(para_title,DOWN,buff=0.5)))
        self.wait()
        self.play(TransformFromCopy(electric_eqs[1], electric_eqs[6].next_to(electric_eqs[1],DOWN,buff=0.5)))
        self.wait()
        self.play(TransformFromCopy(electric_eqs[6], electric_eqs[7].next_to(electric_eqs[6],DOWN,buff=0.5)))
        self.wait()
        self.play(TransformFromCopy(electric_eqs[7], electric_eqs[8].next_to(electric_eqs[7],DOWN,buff=0.5)))
        self.wait()
        self.play(FadeOut(electric_eqs[1],electric_eqs[6],electric_eqs[7]), electric_eqs[8].animate.move_to(ORIGIN))
        self.wait()
        self.play(TransformMatchingTex(electric_eqs[8], parametric_eqs[0]))
        self.wait()
        self.play(Indicate(parametric_eqs[0][5]))
        self.wait()
        res_eqs.next_to(parametric_eqs,DOWN,buff=0.5)
        f_res_eqs.next_to(parametric_eqs,DOWN,buff=0.5)
        self.wait()
        self.play(FadeIn(electric_res_eqs[3]))
        self.wait()
        self.play(FadeIn(electric_res_eqs[4]))
        self.wait()
        self.play(ReplacementTransform(electric_res_eqs[3],electric_res_eqs[0]))
        self.wait()
        self.play(ReplacementTransform(electric_res_eqs[4],electric_res_eqs[2]))
        self.wait()
        self.play(Indicate(parametric_eqs[0][8]), Indicate(electric_res_eqs[2][0]))
        self.wait()
        self.play(FadeOut(electric_res_eqs[0],electric_res_eqs[2]), parametric_eqs[0].animate.scale(1.3))
        self.wait()
        self.play(ReplacementTransform(parametric_eqs[0], parametric_eqs[1].scale(1.3)))
        self.wait()
        self.play(TransformMatchingTex(parametric_eqs[1], parametric_eqs[2].scale(1.3)))
        self.wait()
        self.play(TransformMatchingTex(parametric_eqs[2], parametric_eqs[4].scale(1.3)))
        self.wait()
        self.play(ReplacementTransform(parametric_eqs[4], parametric_eqs[5].scale(1.3)))
        self.wait()
        self.play(TransformMatchingTex(parametric_eqs[5], parametric_eqs[6].scale(1.3)))
        self.wait()
        self.play(FadeIn(parametric_eqs[7].scale(1.3).set_color(GRAY).next_to(parametric_eqs[6], DOWN,buff=1.0)))
        self.wait()
        self.play(TransformMatchingTex(parametric_eqs[7],parametric_eqs[8].scale(1.3).set_color(GRAY).next_to(parametric_eqs[6], DOWN,buff=1.0)))
        self.wait()
        arrow_1 = Arrow(start=parametric_eqs[8][0].get_corner(UR), end=parametric_eqs[6][0].get_corner(DR))
        arrow_2 = Arrow(start=parametric_eqs[8][3].get_corner(UR), end=parametric_eqs[6][5].get_bottom())
        arrow_3 = Arrow(start=parametric_eqs[8][7].get_top(), end=parametric_eqs[6][9].get_corner(DR))
        self.play(FadeIn(arrow_1.set_color(GRAY)))
        self.play(FadeIn(arrow_2.set_color(GRAY)))
        self.play(FadeIn(arrow_3.set_color(GRAY)))
        self.wait()
        self.play(FadeOut(arrow_1,arrow_2,arrow_3))
        self.wait()
        self.play(ReplacementTransform(parametric_eqs[8], parametric_eqs[9].scale(1.3).set_color(GRAY).next_to(parametric_eqs[6], DOWN,buff=0.9)))
        self.wait()
        self.play(Indicate(parametric_eqs[9][7]))
        self.wait()
        self.play(Indicate(parametric_eqs[6][8]))
        self.wait()
        self.play(TransformMatchingTex(parametric_eqs[6], parametric_eqs[10].scale(1.3)), TransformMatchingTex(parametric_eqs[9], parametric_eqs[11].scale(1.3).set_color(GRAY).next_to(parametric_eqs[6], DOWN,buff=0.9)))
        self.wait()
        self.play(FadeOut(parametric_eqs[10], parametric_eqs[11]))
